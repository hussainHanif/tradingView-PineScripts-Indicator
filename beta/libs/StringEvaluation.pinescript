// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© RicardoSantos

//@version=5

// @description Methods to handle evaluation of strings.
library(title='StringEvaluation')

// imports:
import RicardoSantos/MathOperator/1 as op

// Helper Functions:

// @function Check if char is a comma ".".
// @param char string, 1 character string.
// @returns bool.
export is_comma (string char) => //{
    char == '.' ? true : false
//}

// @function Check if char is a operator.
// @param char string, 1 character string.
// @returns bool.
export is_op (string char) => //{
    switch char
        '+' => true
        '-' => true
        '*' => true
        '/' => true
        '^' => true
        '%' => true
        => false
//}

// @function convert a single char string into valid number.
// @param char string, 1 character string.
// @returns float.
export number (string char) => //{
    switch char
        '0' => 0
        '1' => 1
        '2' => 2
        '3' => 3
        '4' => 4
        '5' => 5
        '6' => 6
        '7' => 7
        '8' => 8
        '9' => 9
        => na
//}

// @function operation between left and right values.
// @param op string, operator string character.
// @param left float, left value of operation.
// @param right float, right value of operation.
export operator (string op, float left, float right) => //{
    switch op
        '+' => op.add(left, right)
        '-' => op.subtract(left, right)
        '*' => op.multiply(left, right)
        '/' => op.divide(left, right)
        '^' => math.pow(left, right)
        '%' => op.remainder(left, right)
        => na
//}

// @function level of precedence of operator.
// @param op string, operator 1 char string.
// @returns int.
export operator_precedence (string op) => //{
    switch op
        '+' => 2
        '-' => 2
        '*' => 3
        '/' => 3
        '^' => 4
        '%' => 3
        => 0
//}

// @function Evaluate a string to clean up and retrieve only used chars
// @param _str string, arithmetic operations in a string.
// @returns string array, evaluated array.
export cleanup (string _str) => //{
    // remove spaces:
    _unspaced = str.replace_all(source=_str, target=' ', replacement='')
    _T0 = str.split(_unspaced, '')
    // adds ( ) + - / * characters:
    // join digit sequences into 1 whole number:
    _T1 = array.new_string(0)
    string _saved_expression = ''
    for _i = 0 to array.size(id=_T0)-1
        _current = array.get(id=_T0, index=_i)
        if _current == '(' or _current == ')'
            if _saved_expression != ''
                array.push(id=_T1, value=_saved_expression)
            array.push(id=_T1, value=_current)
            _saved_expression := ''
        if not na(operator(_current, 1, 1))
            if _saved_expression != ''
                array.push(id=_T1, value=_saved_expression)
            array.push(id=_T1, value=_current)
            _saved_expression := ''
        if not na(number(_current)) or is_comma(_current)
            _saved_expression := _saved_expression + _current
    array.push(id=_T1, value=_saved_expression)
    _T1
//{ usage:
// if barstate.islastconfirmedhistory
//     label.new(bar_index, 0.0, str.tostring(cleanup('1+ 66* 7/2^2  %5 ')))
//}

// @function uses Shunting-Yard algorithm to generate a RPN (Reverse Polish notation)
//      array of strings from a array of strings containing arithmetic notation.
//      ex:.. '[3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3]'     -->     '[3 4 2 * 1 5 - 2 3 ^ ^ / +]'
// @param tokens string array, array with arithmetic notation.
// @returns 
export generate_rpn (string[] tokens)=> //{
    int _size = array.size(id=tokens)
    if _size < 1
        runtime.error('StringEvaluation -> generate_rpn(): "tokens" is empty.')
        string[] _S = array.new_string(na)
    else
        _opstack = array.new_string(size=0)
        _output = array.new_string(size=0)
        for _i = 0 to _size-1
            string _current_token = array.get(id=tokens, index=_i)
            _current_arrified = str.split(_current_token, '')
            int _current_size = array.size(id=_current_arrified)
            if not na(number(array.get(id=_current_arrified, index=0)))
                array.push(id=_output, value=_current_token)
            else if _current_token == '('
                array.push(id=_opstack, value=_current_token)
            else if _current_token == ')'
                int _size_stack = array.size(id=_opstack)
                if _size_stack > 0
                    for _j = _size_stack-1 to 0
                        string _op = array.pop(id=_opstack)
                        if _op == '('
                            break
                        else
                            array.push(id=_output, value=_op)
            else if is_op(_current_token)
                int _size_stack = array.size(id=_opstack)
                if _size_stack > 0
                    for _j = _size_stack-1 to 0
                        string _op = array.pop(id=_opstack)
                        int _op_precedence = operator_precedence(_op)
                        int _token_precedence = operator_precedence(_current_token)
                        if _op_precedence > _token_precedence or (_op_precedence == _token_precedence and _op != '^')
                            array.push(id=_output, value=_op)
                        else
                            array.push(id=_opstack, value=_op)
                            break
                array.push(id=_opstack, value=_current_token)
        int _size_stack = array.size(id=_opstack)
        if _size_stack > 0
            for _i = _size_stack-1 to 0
                string _op = array.pop(id=_opstack)
                if _op == '('
                    runtime.error('StringEvaluation -> generate_rpn(): mismatched parentesis!.')
                else
                    array.push(id=_output, value=_op)
        _output
//{ usage:
// if barstate.islastconfirmedhistory
//     label.new(bar_index, 0.0, str.tostring(generate_rpn(cleanup('1+ 66* 7/2^2  %5 '))))
//{ reference:
//     https://rosettacode.org/wiki/Parsing/Shunting-yard_algorithm
//     https://en.wikipedia.org/wiki/Shunting-yard_algorithm
//     https://brilliant.org/wiki/shunting-yard-algorithm/
//}}}

// @function evaluate a RPN (Reverse Polish notation) array of strings.
//      ex:.. 3 4 2 * 1 5 - 2 3 ^ ^ / +
//| @param tokens string array, RPN ordered tokens, ex(['3', '4', '2', '1', '5', '2', '3', '*', '-', '^', '^', '/', '+']).
//| @returns float, solution.
export parse_rpn (string[] tokens) => //{
    int _size = array.size(id=tokens)
    if _size < 1
        runtime.error('StringEvaluation -> generate_rpn(): "tokens" is empty.')
        float(na)
    else
        float _solution = na
        _stack = array.new_float()
        for _i = 0 to _size-1
            string _token = array.get(id=tokens, index=_i)
            float _number = str.tonumber(_token)
            if not na(_number)//
                array.push(id=_stack, value=_number)
            else
                if array.size(id=_stack) > 1
                //     runtime.error('StringEvaluation -> generate_rpn(): insufficient operands!!.\n' + str.tostring(_stack))
                // else
                    o2 = array.pop(id=_stack)
                    o1 = array.pop(id=_stack)
                    if is_op(_token)
                        float _op = operator(_token, o1, o2)
                        array.push(id=_stack, value=_op)
                    else
                        runtime.error('StringEvaluation -> generate_rpn(): unrecognized operator: (' + _token + ' ).')
        _solution := array.pop(id=_stack)
        _solution
//{ usage:
// if barstate.islastconfirmedhistory
//     label.new(bar_index, 0.0, str.tostring(parse_rpn(generate_rpn(cleanup('((10+ 10 *30/20-50)%10)^2')))))
//{ reference:
//     https://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm
//}}}

// @function evaluate a string with references to a array of arguments.
//| @param tokens string, arithmetic operations with references to indices in arguments, ex:"0+1*0+2*2+3" arguments[1, 2, 3]
//| @param arguments float array, arguments.
//| @returns float, solution.
export eval (string tokens, float[] arguments) => //{
    int _size_a = array.size(id=arguments)
    if _size_a < 1
        runtime.error('StringEvaluation -> generate_rpn(): "arguments" is empty.')
        float(na)
    else
        string[] _tokens = generate_rpn(cleanup(tokens))
        int _size_t = array.size(id=_tokens)
        if _size_t < 1
            runtime.error('StringEvaluation -> generate_rpn(): "tokens" is empty.')
            float(na)
        else
            // calculate solution:
            float _solution = na
            _stack = array.new_float()
            for _i = 0 to _size_t-1
                string _token = array.get(id=_tokens, index=_i)
                float _number = str.tonumber(_token)
                if not na(_number)//
                    array.push(id=_stack, value=array.get(id=arguments, index=int(_number)))
                else
                    if array.size(id=_stack) > 1
                    //     runtime.error('StringEvaluation -> generate_rpn(): insufficient operands!!.\n' + str.tostring(_stack))
                    // else
                        o2 = array.pop(id=_stack)
                        o1 = array.pop(id=_stack)
                        if is_op(_token)
                            float _op = operator(_token, o1, o2)
                            array.push(id=_stack, value=_op)
                        else
                            runtime.error('StringEvaluation -> generate_rpn(): unrecognized operator: (' + _token + ' ).')
            _solution := array.pop(id=_stack)
            _solution
//{ usage:
if barstate.islastconfirmedhistory
    label.new(bar_index, 0.0, str.tostring(eval('((0+ 0 *2/1-3)%0)^4', array.from(10.0, 20, 30, 50, 2))))
//{ reference:
//     https://rosettacode.org/wiki/Parsing/RPN_calculator_algorithm
//}}}

